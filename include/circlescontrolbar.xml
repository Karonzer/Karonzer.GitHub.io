<krpano>

	<events name="CirclesControlBarevents" onxmlcomplete="CirclesControlBarbuildMenuBar();" keep="true" />

	<action name="CirclesControlBarbuildMenuBar">
		ifnot (CirclesControlBarbarbuilt, CirclesControlBarbuildMenu(); set(CirclesControlBarbarbuilt, true););
	</action>

	<style name="CirclesControlBar_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
		 
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         />
	<style name="CirclesControlBar_btn_style_off"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         />

	<layer name="CirclesControlBar_menu_bg"
         keep="true"
         type="container"
         zorder="2"
         width="40"
         height="40"
         align="bottom"
         x="0" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >

    <layer name="CirclesControlBarbtn_enter_vr"
            url="%FIRSTXML%/source/common/controlbar/btn_vr_mode.png"
            style="CirclesControlBar_btn_style"
            onclick="webvr.enterVR();"
            visible="true"
            devices="html5"
            />

    <layer name="CirclesControlBarbtn_enter_vr_not"
            url="%FIRSTXML%/source/common/controlbar/btn_vr_mode_off.png"
            style="CirclesControlBar_btn_style"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />

    <layer name="CirclesControlBarbtn_in"
            url="%FIRSTXML%/source/common/controlbar/btn_zoom_in.png"
            ondown="viewControlZoomIn(false);"
            onup="viewControlZoomStop();"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="desktop"
            />

    <layer name="CirclesControlBarbtn_out"
            url="%FIRSTXML%/source/common/controlbar/btn_zoom_out.png"
            ondown="viewControlZoomOut(false);"
            onup="viewControlZoomStop();"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="desktop"
            />

    <layer name="CirclesControlBarbtn_sound_on"
            url="%FIRSTXML%/source/common/controlbar/btn_start_sound.png"
            onclick="playBGM();"
            style="CirclesControlBar_btn_style"
            visible="false"
            />

    <layer name="CirclesControlBarbtn_sound_off"
            url="%FIRSTXML%/source/common/controlbar/btn_stop_sound.png"
            onclick="stopBGM();"
            style="CirclesControlBar_btn_style"
            visible="false"
            />

    <layer name="CirclesControlBarbtn_openfs"
            url="%FIRSTXML%/source/common/controlbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            />
    <layer name="CirclesControlBarbtn_closefs"
            url="%FIRSTXML%/source/common/controlbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            />

    <layer name="CirclesControlBarbtn_autorotate_on"
            url="%FIRSTXML%/source/common/controlbar/btn_start_autorotation.png"
            onclick="autorotate.start();"
            style="CirclesControlBar_btn_style"
            visible="false"
            />
    <layer name="CirclesControlBarbtn_autorotate_off"
            url="%FIRSTXML%/source/common/controlbar/btn_stop_autorotation.png"
            onclick="autorotate.stop();"
            style="CirclesControlBar_btn_style"
            visible="false"
            />


    <layer name="CirclesControlBarbtn_hidecontrols"
           url="%FIRSTXML%/source/common/controlbar/btn_hide_controls.png"
           style="CirclesControlBar_btn_style"
           onclick="CirclesControlBarhideMenuControls();hideTourControls();"
           visible="false"
           />
    <layer name="CirclesControlBarbtn_showcontrols"
           url="%FIRSTXML%/source/common/controlbar/btn_show_controls.png"
           style="CirclesControlBar_btn_style"
           onclick="CirclesControlBarshowMenuControls();showTourControls();"
           visible="false"
           />
 </layer>

<events name="CirclesControlBarvravailableevent"
		webvr_onavailable="CirclesControlBarupdateVrButtonsAvailability();"
		webvr_onunavailable="CirclesControlBarupdateVrButtonsAvailability();"
		keep="true" devices="html5" />


<action name="CirclesControlBarupdateVrButtonsAvailability">
	if (true,
		set(CirclesControlBarmenuvravailable, true);
	,
		set(CirclesControlBarmenuvravailable, false);
	);
	CirclesControlBarupdateVrButtons();
</action>
<action name="CirclesControlBarHideVrButtons">
	set(layer[CirclesControlBarbtn_enter_vr].visible, true);
	if('%1' == 'true',
		set(layer[CirclesControlBarbtn_enter_vr_not].visible, true);
	,
		set(layer[CirclesControlBarbtn_enter_vr_not].visible, false);
	);
</action>
<action name="CirclesControlBarShowVrButtons">
	if (CirclesControlBarmenuvravailable,
		set(layer[CirclesControlBarbtn_enter_vr].visible, true);
		set(layer[CirclesControlBarbtn_enter_vr_not].visible, false);
	,
		CirclesControlBarHideVrButtons(true);
	);
</action>
<action name="CirclesControlBarupdateVrButtons">
if (true,
	if (CirclesControlBarIsOpened,
		CirclesControlBarShowVrButtons();
	,
		CirclesControlBarHideVrButtons();
	);
,
	if (CirclesControlBarIsOpened,
		CirclesControlBarHideVrButtons(true);
	,
		CirclesControlBarHideVrButtons();
	);
);
</action>



<action name="CirclesControlBarhideMenuControls">

	set(CirclesControlBarIsOpened, false);
	set(layer[CirclesControlBarbtn_hidecontrols].visible, false);
	set(layer[CirclesControlBarbtn_showcontrols].visible, true);


if (device.desktop,
set(layer[CirclesControlBarbtn_in].visible, false);
set(layer[CirclesControlBarbtn_out].visible, false);
);
CirclesControlBarupdateFullscreenButtons();


CirclesControlBarupdateAutorotationButtons();

CirclesControlBarupdateSoundButtons();


CirclesControlBarupdateVrButtons();



set(layer[CirclesControlBar_menu_bg].width, get(CirclesControlBarbackgroundwidthwhenclosed));

set(layer[CirclesControlBar_menu_bg].visible, true);
</action>
<action name="CirclesControlBarshowMenuControls">
if(CirclesControlBarNo,
	set(CirclesControlBarIsOpened, true);
	set(layer[CirclesControlBarbtn_hidecontrols].visible, true);
	set(layer[CirclesControlBarbtn_showcontrols].visible, false);
set(layer[CirclesControlBar_menu_bg].visible, true);


if (device.desktop,
set(layer[CirclesControlBarbtn_in].visible, true);
set(layer[CirclesControlBarbtn_out].visible, true);
);
CirclesControlBarupdateFullscreenButtons();


CirclesControlBarupdateAutorotationButtons();

CirclesControlBarupdateSoundButtons();
CirclesControlBarupdateVrButtons();

);


	set(layer[CirclesControlBar_menu_bg].width, get(CirclesControlBarbackgroundwidthwhenopened));
</action>

<events name="CirclesControlBarmenufullscreenchangeevent"
				onenterfullscreen="CirclesControlBarupdateFullscreenButtons();"
				onexitfullscreen="CirclesControlBarupdateFullscreenButtons();"
				keep="true"/>
<action name="CirclesControlBarHideFullscreenButtons">
	set(layer[CirclesControlBarbtn_openfs].visible , false);
	set(layer[CirclesControlBarbtn_closefs].visible, false);
</action>
<action name="CirclesControlBarShowFullscreenButtons">
	if (device.fullscreensupport,
		ifnot(vrmode_on,
			if(fullscreen,
				set(layer[CirclesControlBarbtn_openfs].visible , false);
				set(layer[CirclesControlBarbtn_closefs].visible, true);
			,
				set(layer[CirclesControlBarbtn_openfs].visible ,true);
				set(layer[CirclesControlBarbtn_closefs].visible,false);
			);
		);
	,
		CirclesControlBarHideFullscreenButtons();
	);
</action>
<action name="CirclesControlBarupdateFullscreenButtons">
	if (CirclesControlBarIsOpened,
		CirclesControlBarShowFullscreenButtons();
	,
		CirclesControlBarHideFullscreenButtons();
	);
</action>

<events name="CirclesControlBarAutorotationEvents"
	onautorotatestart="CirclesControlBarupdateAutorotationButtons();"
	onautorotateoneround="CirclesControlBarupdateAutorotationButtons();"
	onautorotatestop="CirclesControlBarupdateAutorotationButtons();"
	onautorotatechange="CirclesControlBarupdateAutorotationButtons();"
	keep="true"/>
<action name="CirclesControlBarHideAutorotationButtons">
	set(layer[CirclesControlBarbtn_autorotate_off].visible, false);
	set(layer[CirclesControlBarbtn_autorotate_on].visible , false);
</action>
<action name="CirclesControlBarShowAutorotationButtons">
	if(autorotate.enabled == false,
		set(layer[CirclesControlBarbtn_autorotate_off].visible, false);
		set(layer[CirclesControlBarbtn_autorotate_on].visible , true);
	,
		set(layer[CirclesControlBarbtn_autorotate_off].visible, true);
		set(layer[CirclesControlBarbtn_autorotate_on].visible , false);
	);
</action>
<action name="CirclesControlBarupdateAutorotationButtons">
	if (CirclesControlBarIsOpened,
		CirclesControlBarShowAutorotationButtons();
	,
		CirclesControlBarHideAutorotationButtons();
	);
</action>

<action name="CirclesControlBarHideSoundButtons">
	set(layer[CirclesControlBarbtn_sound_off].visible, false);
	set(layer[CirclesControlBarbtn_sound_on].visible , false);
</action>
<action name="CirclesControlBarShowSoundButtons">
	ifnot(vrmode_on,
		if (tour_soundson == false,
			set(layer[CirclesControlBarbtn_sound_off].visible, false);
			set(layer[CirclesControlBarbtn_sound_on].visible , true);
		,
			set(layer[CirclesControlBarbtn_sound_off].visible, true);
			set(layer[CirclesControlBarbtn_sound_on].visible , false);
		);
	);
</action>
<action name="CirclesControlBarupdateSoundButtons">
	if (CirclesControlBarIsOpened,
		CirclesControlBarShowSoundButtons();
	,
		CirclesControlBarHideSoundButtons();
	);
</action>


<action name="CirclesControlBarbuildMenu">

	set(CirclesControlBarbutton_pos, 0);

set(CirclesControlBarbackgroundwidthwhenclosed, 40);
	set(layer[CirclesControlBarbtn_hidecontrols].x, get(CirclesControlBarbutton_pos));
	set(layer[CirclesControlBarbtn_showcontrols].x, get(CirclesControlBarbutton_pos));
	inc(CirclesControlBarbutton_pos, 45);

	<!-- if(plugin[ptpvrmode] AND device.html5, -->
		set(layer[CirclesControlBarbtn_enter_vr].x, get(CirclesControlBarbutton_pos));
		set(layer[CirclesControlBarbtn_enter_vr_not].x, get(CirclesControlBarbutton_pos));
		inc(CirclesControlBarbutton_pos, 45);
	<!-- ); -->

		if (device.fullscreensupport,
			set(layer[CirclesControlBarbtn_openfs].x , get(CirclesControlBarbutton_pos));
			set(layer[CirclesControlBarbtn_closefs].x, get(CirclesControlBarbutton_pos));
			inc(CirclesControlBarbutton_pos, 45);
		);

		set(layer[CirclesControlBarbtn_autorotate_on].x , get(CirclesControlBarbutton_pos));
		set(layer[CirclesControlBarbtn_autorotate_off].x, get(CirclesControlBarbutton_pos));
		inc(CirclesControlBarbutton_pos, 45);

		set(layer[CirclesControlBarbtn_sound_on].x , get(CirclesControlBarbutton_pos));
		set(layer[CirclesControlBarbtn_sound_off].x, get(CirclesControlBarbutton_pos));
		inc(CirclesControlBarbutton_pos, 45);

		if (device.desktop,
			set(layer[CirclesControlBarbtn_out].x, get(CirclesControlBarbutton_pos));
			inc(CirclesControlBarbutton_pos, 45);
			set(layer[CirclesControlBarbtn_in].x, get(CirclesControlBarbutton_pos));
			inc(CirclesControlBarbutton_pos, 45);
		);

		dec(CirclesControlBarbutton_pos, 5);

		set(CirclesControlBarbackgroundwidthwhenopened, get(CirclesControlBarbutton_pos));

		set(layer[CirclesControlBar_menu_bg].width, get(CirclesControlBarbackgroundwidthwhenopened));

	</action>

<events name="CirclesControlBarStartTourEvents" onloadcomplete="CirclesControlBarCallOnStartTour();" keep="true" />

<action name="CirclesControlBarCallOnStartTour">
	CirclesControlBarshowMenuControls();
</action>

<action name="exitFullScreen" devices="fullscreensupport">set(fullscreen,false);</action>
<action name="enterFullScreen" devices="fullscreensupport">set(fullscreen,true);</action>
<action name="switchFullScreen">if(fullscreen,exitFullScreen();,enterFullScreen(););</action>

<events name="krpanoExitFullscreenEvent"
	onexitfullscreen="if(fullscreen,exitFullScreenChangeEvent(););"
	keep="true" />

<action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(fullscreen,false);events.dispatch(onexitfullscreen);</action>
<action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(fullscreen,true);events.dispatch(onenterfullscreen);</action>
<action name="exitFullScreenFallback">set(fullscreen,false);</action>
<action name="enterFullScreenFallback">set(fullscreen,true);</action>

<action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

<action name="viewControlZoomIn">
if(%1,
	if(%2,
		if(%2 LT view.fovmin,
			zoomto(get(view.fovmin));
		,
			if(%2 LT view.fov,
				zoomto(%2);
			);
		);
	,
		set(fov_moveforce, -1);
		delayedcall(0.1, viewControlZoomStop());
	);
,
	set(fov_moveforce, -1);
);
</action>
<action name="viewControlZoomOut">
if(%1,
	if(%2,
		if(%2 GT view.fovmax,
			zoomto(get(view.fovmax));
		,
			if(%2 GT view.fov,
				zoomto(%2);
			);
		);
	,
		set(fov_moveforce, +1);
		delayedcall(0.1, viewControlZoomStop());
	);
,
	set(fov_moveforce, +1);
);
</action>
<action name="viewControlZoomStop">
set(fov_moveforce, 0);
</action>

	<action name="vr_test">
		trace("vr_test");
	</action>

</krpano>
